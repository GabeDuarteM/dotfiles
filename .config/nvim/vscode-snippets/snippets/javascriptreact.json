{
  "commentMultilineJsx": {
    "prefix": "commentMultilineJsx",
    "body": [
      "{/* ",
      "  ${TM_SELECTED_TEXT}",
      "*/}"
    ],
    "description": "Multiline comments JSX"
  },
  "impr": {
    "prefix": "impr",
    "body": "import React from 'react'",
    "description": "Import React"
  },
  "imprd": {
    "prefix": "imprd",
    "body": "import ReactDOM from 'react-dom'",
    "description": "Import React-DOM"
  },
  "imppt": {
    "prefix": "imppt",
    "body": "import PropTypes from 'prop-types'",
    "description": "Import PropTypes"
  },
  "rc": {
    "prefix": "rc",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} = () => {",
      "  return ${2:<div>Hello</div>}",
      "}",
      "",
      "export default $1"
    ],
    "description": "React component"
  },
  "useState": {
    "prefix": "useState",
    "body": "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = React.useState($2)",
    "description": "React.useState"
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "React.useEffect(() => {",
      "  $1",
      "}, [$2])"
    ],
    "description": "React.useEffect"
  },
  "useContext": {
    "prefix": "useContext",
    "body": "const ${1:context} = React.useContext(${2:contextValue})",
    "description": "React.useContext"
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": "const [${1:state}, dispatch] = React.useReducer(${2:reducer}, ${3:initialState}, ${4:init})",
    "description": "React.useReducer"
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "React.useCallback(",
      "  () => {",
      "    ${1:callback}",
      "  },",
      "  [${2:input}],",
      ")"
    ],
    "description": "React.useCallback"
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": "React.useMemo(() => ${1:function}, ${2:input})",
    "description": "React.useMemo"
  },
  "useRef": {
    "prefix": "useRef",
    "body": "const ${1:ref} = React.useRef(${2:initialValue})",
    "description": "React.useRef"
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "React.useImperativeHandle(",
      "  ${1:ref},",
      "  () => {",
      "    ${2:handler}",
      "  },",
      "  [${3:input}],",
      ")"
    ],
    "description": "React.useImperativeHandle"
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": "React.useDebugValue(${1:value})",
    "description": "React.useDebugValue"
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "  return () => {",
      "    ${1:effect}",
      "  },",
      "  [${2:input}]",
      "})"
    ],
    "description": "React.useLayoutEffect"
  },
  "styled": {
    "prefix": "styled",
    "body": [
      "const ${1:Styled} = styled.${2:div}\\`",
      "  $3",
      "\\`"
    ],
    "description": "Create a styled-component"
  },
  "pt": {
    "prefix": "pt",
    "body": [
      "${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}.propTypes = {",
      "  $2",
      "}"
    ],
    "description": "PropTypes shell"
  },
  "dp": {
    "prefix": "dp",
    "body": [
      "${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}.defaultProps = {",
      "  $2",
      "}"
    ],
    "description": "defaultProps shell"
  },
  "pts": {
    "prefix": "pts",
    "body": "PropTypes.string",
    "description": "PropType string property"
  },
  "ptsr": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired",
    "description": "PropType string required property"
  },
  "pta": {
    "prefix": "pta",
    "body": "PropTypes.array",
    "description": "PropType array property"
  },
  "ptar": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired",
    "description": "PropType array required property"
  },
  "pto": {
    "prefix": "pto",
    "body": "PropTypes.object",
    "description": "PropType object property"
  },
  "ptor": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired",
    "description": "PropType object required property"
  },
  "ptb": {
    "prefix": "ptb",
    "body": "PropTypes.bool",
    "description": "PropType bool property"
  },
  "ptbr": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired",
    "description": "PropType bool required property"
  },
  "ptf": {
    "prefix": "ptf",
    "body": "PropTypes.func",
    "description": "PropType func property"
  },
  "ptfr": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired",
    "description": "PropType func required property"
  },
  "ptn": {
    "prefix": "ptn",
    "body": "PropTypes.number",
    "description": "PropType number property"
  },
  "ptnr": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired",
    "description": "PropType number required property"
  },
  "ptsy": {
    "prefix": "ptsy",
    "body": "PropTypes.symbol",
    "description": "PropType symbol property"
  },
  "ptsyr": {
    "prefix": "ptsyr",
    "body": "PropTypes.symbol.isRequired",
    "description": "PropType symbol required property"
  },
  "ptno": {
    "prefix": "ptno",
    "body": "PropTypes.node",
    "description": "PropType node property"
  },
  "ptnor": {
    "prefix": "ptnor",
    "body": "PropTypes.node.isRequired",
    "description": "PropType node required property"
  },
  "ptet": {
    "prefix": "ptet",
    "body": "PropTypes.elementType",
    "description": "PropType elementType property"
  },
  "ptetr": {
    "prefix": "ptetr",
    "body": "PropTypes.elementType.isRequired",
    "description": "PropType elementType required property"
  },
  "ptoo": {
    "prefix": "ptoo",
    "body": "PropTypes.oneOf([$1])",
    "description": "PropType oneOf property"
  },
  "ptoor": {
    "prefix": "ptoor",
    "body": "PropTypes.oneOf([$1]).isRequired",
    "description": "PropType oneOf required property"
  },
  "ptoot": {
    "prefix": "ptoot",
    "body": "PropTypes.oneOfType([$1])",
    "description": "PropType oneOfType property"
  },
  "ptootr": {
    "prefix": "ptootr",
    "body": "PropTypes.oneOfType([$1]).isRequired",
    "description": "PropType oneOfType required property"
  },
  "ptao": {
    "prefix": "ptao",
    "body": "PropTypes.arrayOf($1)",
    "description": "PropType arrayOf property"
  },
  "ptaor": {
    "prefix": "ptaor",
    "body": "PropTypes.arrayOf($1).isRequired",
    "description": "PropType arrayOf required property"
  },
  "ptsh": {
    "prefix": "ptsh",
    "body": "PropTypes.shape($1)",
    "description": "PropType shape property"
  },
  "ptshr": {
    "prefix": "ptshr",
    "body": "PropTypes.shape($1).isRequired",
    "description": "PropType shape required property"
  },
  "ptan": {
    "prefix": "ptan",
    "body": "PropTypes.any",
    "description": "PropType any property"
  },
  "ptanr": {
    "prefix": "ptanr",
    "body": "PropTypes.any.isRequired",
    "description": "PropType any required property"
  }
}
