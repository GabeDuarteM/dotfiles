# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet imp "Import statement" b
import ${2:module} from '$1'
endsnippet

snippet clg "console.log()"
console.log(${1:${VISUAL}})
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)" b
;(() => {
  ${1:${VISUAL}}
})()
endsnippet

snippet setTimeout "setTimeout function"
setTimeout(() => ${1:${VISUAL:function}}, ${2:ms})
endsnippet

snippet setInterval "setInterval function"
setInterval(() => ${1:${VISUAL:function}}, ${2:ms})
endsnippet

snippet ifcondition "if"
if(${1:condition}) {
  ${2:${VISUAL}}
}$0
endsnippet

snippet else "else" b
else {
  ${1:${VISUAL}}
}
endsnippet

snippet switch "switch" b
switch (${1:condition}) {
  case ${2:option}:
    ${3:${VISUAL}}
    break
  $0
  default:
    ${4:throw new Error("Not implemented")}
}
endsnippet

snippet case "case" b
case ${1:option}:
  ${2:${VISUAL}}
  break
endsnippet

snippet jsdoc "jsdoc comment" b
/** $0 */
endsnippet

# Node

snippet shebang "shebang"
#!/usr/bin/env node
endsnippet

snippet require "assign a CommonJS-style module to a var"
const ${0:${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/\u$2/g}} = require('$1')
endsnippet

# React

snippet impr "Import React" b
import React from 'react'
endsnippet

snippet imprd "Import React-DOM" b
import ReactDOM from 'react-dom'
endsnippet

snippet imppt "Import PropTypes" b
import PropTypes from 'prop-types'
endsnippet

snippet rc "React component" b
import React from 'react'

const ${1:`!p snip.rv = snip.basename`} = () => {
  return ${2:<div>Hello</div>}
}

export default $1
endsnippet

snippet useState "React.useState" b
const [${1:state}, set${1/\w+\s*/\u$0/}] = React.useState($2)
endsnippet

snippet useEffect "React.useEffect" b
React.useEffect(() => {
  $1
}, [$2])
endsnippet

snippet useContext "React.useContext" b
const ${1:context} = React.useContext(${2:contextValue})
endsnippet

snippet useReducer "React.useReducer" b
const [${1:state}, dispatch] = React.useReducer(${2:reducer}, ${3:initialState}, ${4:init})
endsnippet

snippet useCallback "React.useCallback" b
React.useCallback(
  () => {
    ${1:callback}
  },
  [${2:input}],
)
endsnippet

snippet useMemo "React.useMemo" b
React.useMemo(() => ${1:function}, ${2:input})
endsnippet

snippet useRef "React.useRef" b
const ${1:ref} = React.useRef(${2:initialValue})
endsnippet

snippet useImperativeHandle "React.useImperativeHandle" b
React.useImperativeHandle(
  ${1:ref},
  () => {
    ${2:handler}
  },
  [${3:input}],
)
endsnippet

snippet useDebugValue "React.useDebugValue" b
React.useDebugValue(${1:value})
endsnippet

snippet useLayoutEffect "React.useLayoutEffect" b
useLayoutEffect(() => {
  return () => {
    ${1:effect}
  },
  [${2:input}]
})
endsnippet

snippet ind "Template for the index.js" b
export { default } from './${1:`!p snip.rv = os.path.basename(os.path.dirname(path))`}'

endsnippet

snippet styled "Create a styled-component" b
const ${1:Styled} = styled.${2:div}\`
  $3
\`
endsnippet

snippet pt "PropTypes shell"
${1:`!p snip.rv = snip.basename`}.propTypes = {
  $2
}
endsnippet

snippet dp "defaultProps shell" b
${1:`!p snip.rv = snip.basename`}.defaultProps = {
  $2
}
endsnippet

snippet pts "PropType string property"
PropTypes.string,
endsnippet
snippet ptsr "PropType string required property"
PropTypes.string.isRequired,
endsnippet

snippet pta "PropType array property"
PropTypes.array,
endsnippet
snippet ptar "PropType array required property"
PropTypes.array.isRequired,
endsnippet

snippet pto "PropType object property"
PropTypes.object,
endsnippet
snippet ptor "PropType object required property"
PropTypes.object.isRequired,
endsnippet

snippet ptb "PropType bool property"
PropTypes.bool,
endsnippet
snippet ptbr "PropType bool required property"
PropTypes.bool.isRequired,
endsnippet

snippet ptf "PropType func property"
PropTypes.func,
endsnippet
snippet ptfr "PropType func required property"
PropTypes.func.isRequired,
endsnippet

snippet ptn "PropType number property"
PropTypes.number,
endsnippet
snippet ptnr "PropType number required property"
PropTypes.number.isRequired,
endsnippet

snippet ptsy "PropType symbol property"
PropTypes.symbol,
endsnippet
snippet ptsyr "PropType symbol required property"
PropTypes.symbol.isRequired,
endsnippet

snippet ptno "PropType node property"
PropTypes.node,
endsnippet
snippet ptnor "PropType node required property"
PropTypes.node.isRequired,
endsnippet

snippet ptet "PropType elementType property"
PropTypes.elementType,
endsnippet
snippet ptetr "PropType elementType required property"
PropTypes.elementType.isRequired,
endsnippet

snippet ptoo "PropType oneOf property"
PropTypes.oneOf([$1]),
endsnippet
snippet ptoor "PropType oneOf required property"
PropTypes.oneOf([$1]).isRequired,
endsnippet

snippet ptoot "PropType oneOfType property"
PropTypes.oneOfType([$1]),
endsnippet
snippet ptootr "PropType oneOfType required property"
PropTypes.oneOfType([$1]).isRequired,
endsnippet

snippet ptao "PropType arrayOf property"
PropTypes.arrayOf,
endsnippet
snippet ptaor "PropType arrayOf required property"
PropTypes.arrayOf.isRequired,
endsnippet

snippet ptsh "PropType shape property"
PropTypes.shape,
endsnippet
snippet ptshr "PropType shape required property"
PropTypes.shape.isRequired,
endsnippet

snippet ptan "PropType any property"
PropTypes.any,
endsnippet
snippet ptanr "PropType any required property"
PropTypes.any.isRequired,
endsnippet
